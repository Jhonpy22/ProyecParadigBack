// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Services.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250911050750_BdParadigmas")]
    partial class BdParadigmas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.CartaTablero", b =>
                {
                    b.Property<int>("CartaTableroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartaTableroId"));

                    b.Property<int>("ClavePareja")
                        .HasColumnType("int");

                    b.Property<bool>("EstaEmparejada")
                        .HasColumnType("bit");

                    b.Property<int>("Indice")
                        .HasColumnType("int");

                    b.Property<int>("PartidaId")
                        .HasColumnType("int");

                    b.HasKey("CartaTableroId");

                    b.HasIndex("PartidaId", "Indice")
                        .IsUnique();

                    b.ToTable("Tablero");
                });

            modelBuilder.Entity("Domain.Entities.Jugador", b =>
                {
                    b.Property<int>("JugadorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JugadorId"));

                    b.Property<DateTime>("CreadoUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("JugadorId");

                    b.ToTable("Jugadores");
                });

            modelBuilder.Entity("Domain.Entities.Movimiento", b =>
                {
                    b.Property<int>("MovimientoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovimientoId"));

                    b.Property<DateTime>("CreadoUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FuePareja")
                        .HasColumnType("bit");

                    b.Property<int>("IndicePrimero")
                        .HasColumnType("int");

                    b.Property<int>("IndiceSegundo")
                        .HasColumnType("int");

                    b.Property<int>("JugadorId")
                        .HasColumnType("int");

                    b.Property<int>("PartidaId")
                        .HasColumnType("int");

                    b.HasKey("MovimientoId");

                    b.HasIndex("JugadorId");

                    b.HasIndex("PartidaId");

                    b.ToTable("Movimientos");
                });

            modelBuilder.Entity("Domain.Entities.Partida", b =>
                {
                    b.Property<int>("PartidaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartidaId"));

                    b.Property<int>("Columnas")
                        .HasColumnType("int");

                    b.Property<int>("Dificultad")
                        .HasColumnType("int");

                    b.Property<int>("DuracionSegundos")
                        .HasColumnType("int");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<int>("Filas")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FinalizadaUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GanadorId")
                        .HasColumnType("int");

                    b.Property<int?>("IndicePrimerVolteo")
                        .HasColumnType("int");

                    b.Property<DateTime>("IniciadaUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("JugadorActualId")
                        .HasColumnType("int");

                    b.Property<int>("NumeroTurno")
                        .HasColumnType("int");

                    b.Property<int?>("PuntajeGanador")
                        .HasColumnType("int");

                    b.Property<int>("PuntosPorPareja")
                        .HasColumnType("int");

                    b.Property<int>("SalaId")
                        .HasColumnType("int");

                    b.HasKey("PartidaId");

                    b.HasIndex("GanadorId");

                    b.HasIndex("JugadorActualId");

                    b.HasIndex("SalaId");

                    b.ToTable("Partidas");
                });

            modelBuilder.Entity("Domain.Entities.PartidaJugador", b =>
                {
                    b.Property<int>("PartidaId")
                        .HasColumnType("int");

                    b.Property<int>("JugadorId")
                        .HasColumnType("int");

                    b.Property<int>("OrdenTurno")
                        .HasColumnType("int");

                    b.Property<int>("Puntaje")
                        .HasColumnType("int");

                    b.HasKey("PartidaId", "JugadorId");

                    b.HasIndex("JugadorId");

                    b.ToTable("PartidaJugadores");
                });

            modelBuilder.Entity("Domain.Entities.Sala", b =>
                {
                    b.Property<int>("SalaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalaId"));

                    b.Property<int>("AnfitrionId")
                        .HasColumnType("int");

                    b.Property<string>("CodigoIngreso")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<int>("MaxJugadores")
                        .HasColumnType("int");

                    b.Property<int?>("PartidaActualId")
                        .HasColumnType("int");

                    b.HasKey("SalaId");

                    b.HasIndex("AnfitrionId");

                    b.HasIndex("CodigoIngreso")
                        .IsUnique();

                    b.HasIndex("PartidaActualId");

                    b.ToTable("Salas");
                });

            modelBuilder.Entity("Domain.Entities.SalaJugador", b =>
                {
                    b.Property<int>("SalaId")
                        .HasColumnType("int");

                    b.Property<int>("JugadorId")
                        .HasColumnType("int");

                    b.Property<int?>("OrdenTurno")
                        .HasColumnType("int");

                    b.HasKey("SalaId", "JugadorId");

                    b.HasIndex("JugadorId");

                    b.ToTable("SalaJugadores");
                });

            modelBuilder.Entity("Domain.Entities.CartaTablero", b =>
                {
                    b.HasOne("Domain.Entities.Partida", "Partida")
                        .WithMany("Tablero")
                        .HasForeignKey("PartidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partida");
                });

            modelBuilder.Entity("Domain.Entities.Movimiento", b =>
                {
                    b.HasOne("Domain.Entities.Jugador", "Jugador")
                        .WithMany()
                        .HasForeignKey("JugadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Partida", "Partida")
                        .WithMany("Movimientos")
                        .HasForeignKey("PartidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jugador");

                    b.Navigation("Partida");
                });

            modelBuilder.Entity("Domain.Entities.Partida", b =>
                {
                    b.HasOne("Domain.Entities.Jugador", "Ganador")
                        .WithMany()
                        .HasForeignKey("GanadorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Jugador", "JugadorActual")
                        .WithMany()
                        .HasForeignKey("JugadorActualId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Sala", "Sala")
                        .WithMany("Partidas")
                        .HasForeignKey("SalaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ganador");

                    b.Navigation("JugadorActual");

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("Domain.Entities.PartidaJugador", b =>
                {
                    b.HasOne("Domain.Entities.Jugador", "Jugador")
                        .WithMany("Partidas")
                        .HasForeignKey("JugadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Partida", "Partida")
                        .WithMany("PartidaJugadores")
                        .HasForeignKey("PartidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jugador");

                    b.Navigation("Partida");
                });

            modelBuilder.Entity("Domain.Entities.Sala", b =>
                {
                    b.HasOne("Domain.Entities.Jugador", "Anfitrion")
                        .WithMany()
                        .HasForeignKey("AnfitrionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Partida", "PartidaActual")
                        .WithMany()
                        .HasForeignKey("PartidaActualId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Anfitrion");

                    b.Navigation("PartidaActual");
                });

            modelBuilder.Entity("Domain.Entities.SalaJugador", b =>
                {
                    b.HasOne("Domain.Entities.Jugador", "Jugador")
                        .WithMany("Salas")
                        .HasForeignKey("JugadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Sala", "Sala")
                        .WithMany("Jugadores")
                        .HasForeignKey("SalaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jugador");

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("Domain.Entities.Jugador", b =>
                {
                    b.Navigation("Partidas");

                    b.Navigation("Salas");
                });

            modelBuilder.Entity("Domain.Entities.Partida", b =>
                {
                    b.Navigation("Movimientos");

                    b.Navigation("PartidaJugadores");

                    b.Navigation("Tablero");
                });

            modelBuilder.Entity("Domain.Entities.Sala", b =>
                {
                    b.Navigation("Jugadores");

                    b.Navigation("Partidas");
                });
#pragma warning restore 612, 618
        }
    }
}
